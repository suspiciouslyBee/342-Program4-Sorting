#!/bin/bash

# Creates a .csv with each test. Prints breaks line limits because I don't have 
# enough time to remember how to get bash to play nicely with that.

echo -e "Compiling and erasing previous records\n\n"

POWER=7
INIT_INT=10
MAX=$((INIT_INT ** POWER))
FILE=testsWITHOUTBUBBLEORINSERTION_performant.csv

make clean
make performant
rm $FILE




echo "Running simulations with intial interval of $INIT_INT and max vector size of $MAX, derived from power of $POWER"

#add with algo names to test
algo=("ShellSort" "MergeSort" "IterativeMergeSort" "QuickSort")


#setup categories into test

echo -n "ListSize," >> $FILE
for i in ${algo[@]}; do
  echo -n "$i(us)," >> $FILE
done
echo -e -n "\n" >> $FILE


INTERVAL=$INIT_INT
for ((i = $INTERVAL; i <= $MAX; i = i + $INTERVAL)); do
  echo "$i," >> $FILE
  if [ $((i)) == $((INTERVAL * INIT_INT)) ];
  then
    INTERVAL=$((INTERVAL * INIT_INT))
  fi
done

INTERVAL=$INIT_INT


# Runs each test, using fancy sed to truncate to just the Milisecs
# Then uses sed to find the item size and appends to the line
for j in ${algo[@]}; do
  echo -e -n "Running $j"
  INTERVAL=$INIT_INT
  for ((i = $INTERVAL; i <= $MAX; i = i + $INTERVAL)); do

    # Makes sure interval follows the second highest order of magnitude
    if [ $((i)) == $((INTERVAL * (INIT_INT))) ];
    then
      INTERVAL=$((INTERVAL * INIT_INT))
    fi


    echo -e -n "\rRunning $j ($i of $MAX at interval $INTERVAL) Last sort took $insert us to complete"
    insert=$(./sorter "$j" "$i" | sed 's/[^0-9]//g')
    sed -i "/^$i,/ s/$/$insert,/" $FILE
  done
  echo -e "\n"
done


